{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import L from'leaflet';import'leaflet/dist/leaflet.css';import'leaflet.heat/dist/leaflet-heat.js';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const EarthquakeHeatmap=()=>{const mapRef=useRef(null);const[earthquakeData,setEarthquakeData]=useState([]);const mapInstance=useRef(null);// Use a ref to store the map instance\nuseEffect(()=>{// Load and parse the CSV file from the public folder\nfetch('/processed_earthquake_data.csv').then(response=>response.text()).then(data=>{const parsedData=data.split('\\n').map(row=>{const[earthquake_time,latitude,longitude,depth,magnitude,location]=row.split(',');return{latitude:parseFloat(latitude),longitude:parseFloat(longitude),magnitude:parseFloat(magnitude)};}).filter(row=>row.latitude&&row.longitude);// Filter out invalid rows\nsetEarthquakeData(parsedData);});},[]);useEffect(()=>{if(earthquakeData.length>0&&!mapInstance.current){// Initialize the Leaflet map only if it's not already initialized\nconst map=L.map(mapRef.current).setView([0,118],5);// Set the view to Indonesia\n// Add tile layer\nL.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);// Prepare the heatmap data (latitude, longitude, magnitude)\nconst heatData=earthquakeData.map(d=>[d.latitude,d.longitude,d.magnitude]);// Add heatmap layer\nL.heatLayer(heatData,{radius:25,blur:15}).addTo(map);// Store the map instance in ref\nmapInstance.current=map;}else if(earthquakeData.length>0&&mapInstance.current){// If map is already initialized, update the heatmap data\nconst heatData=earthquakeData.map(d=>[d.latitude,d.longitude,d.magnitude]);L.heatLayer(heatData,{radius:25,blur:15}).addTo(mapInstance.current);}},[earthquakeData]);return/*#__PURE__*/_jsxs(\"div\",{style:{margin:0,padding:0,height:'100vh'},children:[\" \",/*#__PURE__*/_jsx(\"h1\",{style:{textAlign:'center',color:'#333',fontSize:'2rem',fontWeight:'bold',position:'absolute',top:'10px',width:'100%',zIndex:1000,// Keep the header on top of the map\nbackgroundColor:'rgba(255, 255, 255, 0.7)'// Optional: make the background semi-transparent\n},children:\"Earthquake Heatmap\"}),/*#__PURE__*/_jsx(\"div\",{ref:mapRef,style:{width:'100%',height:'100vh',// Full viewport height\nposition:'absolute',top:0,// Position the map to start at the top of the screen\nleft:0// Position the map to start at the left of the screen\n}}),\" \"]});};export default EarthquakeHeatmap;","map":{"version":3,"names":["React","useEffect","useRef","useState","L","jsx","_jsx","jsxs","_jsxs","EarthquakeHeatmap","mapRef","earthquakeData","setEarthquakeData","mapInstance","fetch","then","response","text","data","parsedData","split","map","row","earthquake_time","latitude","longitude","depth","magnitude","location","parseFloat","filter","length","current","setView","tileLayer","addTo","heatData","d","heatLayer","radius","blur","style","margin","padding","height","children","textAlign","color","fontSize","fontWeight","position","top","width","zIndex","backgroundColor","ref","left"],"sources":["/home/ronak/Downloads/EST_ClimateTech/climate-change-app/src/components/EarthquakeHeatmap.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet.heat/dist/leaflet-heat.js';\n\nconst EarthquakeHeatmap = () => {\n    const mapRef = useRef(null);\n    const [earthquakeData, setEarthquakeData] = useState([]);\n    const mapInstance = useRef(null);  // Use a ref to store the map instance\n\n    useEffect(() => {\n        // Load and parse the CSV file from the public folder\n        fetch('/processed_earthquake_data.csv')\n            .then((response) => response.text())\n            .then((data) => {\n                \n                const parsedData = data.split('\\n').map((row) => {\n                    const [earthquake_time, latitude, longitude, depth, magnitude, location] = row.split(',');\n\n                    return {\n                        latitude: parseFloat(latitude),\n                        longitude: parseFloat(longitude),\n                        magnitude: parseFloat(magnitude),\n                    };\n                }).filter((row) => row.latitude && row.longitude); // Filter out invalid rows\n\n                setEarthquakeData(parsedData);\n            });\n    }, []);\n\n    useEffect(() => {\n        if (earthquakeData.length > 0 && !mapInstance.current) {\n            // Initialize the Leaflet map only if it's not already initialized\n            const map = L.map(mapRef.current).setView([0, 118], 5);  // Set the view to Indonesia\n\n            // Add tile layer\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n\n            // Prepare the heatmap data (latitude, longitude, magnitude)\n            const heatData = earthquakeData.map((d) => [d.latitude, d.longitude, d.magnitude]);\n\n            // Add heatmap layer\n            L.heatLayer(heatData, { radius: 25, blur: 15 }).addTo(map);\n\n            // Store the map instance in ref\n            mapInstance.current = map;\n        } else if (earthquakeData.length > 0 && mapInstance.current) {\n            // If map is already initialized, update the heatmap data\n            const heatData = earthquakeData.map((d) => [d.latitude, d.longitude, d.magnitude]);\n            L.heatLayer(heatData, { radius: 25, blur: 15 }).addTo(mapInstance.current);\n        }\n    }, [earthquakeData]);\n\n    return (\n        <div style={{ margin: 0, padding: 0, height: '100vh' }}> {/* Full viewport height */}\n            <h1\n                style={{\n                    textAlign: 'center',\n                    color: '#333',\n                    fontSize: '2rem',\n                    fontWeight: 'bold',\n                    position: 'absolute',\n                    top: '10px',\n                    width: '100%',\n                    zIndex: 1000,  // Keep the header on top of the map\n                    backgroundColor: 'rgba(255, 255, 255, 0.7)',  // Optional: make the background semi-transparent\n                }}\n            >\n                Earthquake Heatmap\n            </h1>\n            <div\n                ref={mapRef}\n                style={{\n                    width: '100%',\n                    height: '100vh',  // Full viewport height\n                    position: 'absolute',\n                    top: 0,  // Position the map to start at the top of the screen\n                    left: 0,  // Position the map to start at the left of the screen\n                }}\n            ></div> {/* Leaflet map container */}\n        </div>\n    );\n};\n\nexport default EarthquakeHeatmap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}