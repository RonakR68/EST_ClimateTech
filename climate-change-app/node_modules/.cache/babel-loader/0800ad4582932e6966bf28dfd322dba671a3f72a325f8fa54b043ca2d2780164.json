{"ast":null,"code":"var _jsxFileName = \"/home/ronak/Downloads/EST_ClimateTech/climate-change-app/src/components/EarthquakeHeatmap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet.heat/dist/leaflet-heat.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EarthquakeHeatmap = () => {\n  _s();\n  const mapRef = useRef(null);\n  const [earthquakeData, setEarthquakeData] = useState([]);\n  const mapInstance = useRef(null); // Use a ref to store the map instance\n\n  useEffect(() => {\n    // Load and parse the CSV file from the public folder\n    fetch('/processed_earthquake_data.csv').then(response => response.text()).then(data => {\n      const parsedData = data.split('\\n').map(row => {\n        const [earthquake_time, latitude, longitude, depth, magnitude, location] = row.split(',');\n        return {\n          latitude: parseFloat(latitude),\n          longitude: parseFloat(longitude),\n          magnitude: parseFloat(magnitude)\n        };\n      }).filter(row => row.latitude && row.longitude); // Filter out invalid rows\n\n      setEarthquakeData(parsedData);\n    });\n  }, []);\n  useEffect(() => {\n    if (earthquakeData.length > 0 && !mapInstance.current) {\n      // Initialize the Leaflet map only if it's not already initialized\n      const map = L.map(mapRef.current).setView([0, 118], 5); // Set the view to Indonesia\n\n      // Add tile layer\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n\n      // Prepare the heatmap data (latitude, longitude, magnitude)\n      const heatData = earthquakeData.map(d => [d.latitude, d.longitude, d.magnitude]);\n\n      // Add heatmap layer\n      L.heatLayer(heatData, {\n        radius: 25,\n        blur: 15\n      }).addTo(map);\n\n      // Store the map instance in ref\n      mapInstance.current = map;\n    } else if (earthquakeData.length > 0 && mapInstance.current) {\n      // If map is already initialized, update the heatmap data\n      const heatData = earthquakeData.map(d => [d.latitude, d.longitude, d.magnitude]);\n      L.heatLayer(heatData, {\n        radius: 25,\n        blur: 15\n      }).addTo(mapInstance.current);\n    }\n  }, [earthquakeData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: 0,\n      padding: 0,\n      height: '100vh'\n    },\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: 'center',\n        color: '#333',\n        fontSize: '2rem',\n        fontWeight: 'bold',\n        position: 'absolute',\n        top: '10px',\n        width: '100%',\n        zIndex: 1000,\n        // Keep the header on top of the map\n        backgroundColor: 'rgba(255, 255, 255, 0.7)' // Optional: make the background semi-transparent\n      },\n      children: \"Earthquake Heatmap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        width: '100%',\n        height: '100vh',\n        // Full viewport height\n        position: 'absolute',\n        top: 0,\n        // Position the map to start at the top of the screen\n        left: 0 // Position the map to start at the left of the screen\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(EarthquakeHeatmap, \"AwQ7X8Ccd7GcSqjGSLP7gXKDuGE=\");\n_c = EarthquakeHeatmap;\nexport default EarthquakeHeatmap;\nvar _c;\n$RefreshReg$(_c, \"EarthquakeHeatmap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","jsxDEV","_jsxDEV","EarthquakeHeatmap","_s","mapRef","earthquakeData","setEarthquakeData","mapInstance","fetch","then","response","text","data","parsedData","split","map","row","earthquake_time","latitude","longitude","depth","magnitude","location","parseFloat","filter","length","current","setView","tileLayer","addTo","heatData","d","heatLayer","radius","blur","style","margin","padding","height","children","textAlign","color","fontSize","fontWeight","position","top","width","zIndex","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","ref","left","_c","$RefreshReg$"],"sources":["/home/ronak/Downloads/EST_ClimateTech/climate-change-app/src/components/EarthquakeHeatmap.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport 'leaflet.heat/dist/leaflet-heat.js';\n\nconst EarthquakeHeatmap = () => {\n    const mapRef = useRef(null);\n    const [earthquakeData, setEarthquakeData] = useState([]);\n    const mapInstance = useRef(null);  // Use a ref to store the map instance\n\n    useEffect(() => {\n        // Load and parse the CSV file from the public folder\n        fetch('/processed_earthquake_data.csv')\n            .then((response) => response.text())\n            .then((data) => {\n                \n                const parsedData = data.split('\\n').map((row) => {\n                    const [earthquake_time, latitude, longitude, depth, magnitude, location] = row.split(',');\n\n                    return {\n                        latitude: parseFloat(latitude),\n                        longitude: parseFloat(longitude),\n                        magnitude: parseFloat(magnitude),\n                    };\n                }).filter((row) => row.latitude && row.longitude); // Filter out invalid rows\n\n                setEarthquakeData(parsedData);\n            });\n    }, []);\n\n    useEffect(() => {\n        if (earthquakeData.length > 0 && !mapInstance.current) {\n            // Initialize the Leaflet map only if it's not already initialized\n            const map = L.map(mapRef.current).setView([0, 118], 5);  // Set the view to Indonesia\n\n            // Add tile layer\n            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);\n\n            // Prepare the heatmap data (latitude, longitude, magnitude)\n            const heatData = earthquakeData.map((d) => [d.latitude, d.longitude, d.magnitude]);\n\n            // Add heatmap layer\n            L.heatLayer(heatData, { radius: 25, blur: 15 }).addTo(map);\n\n            // Store the map instance in ref\n            mapInstance.current = map;\n        } else if (earthquakeData.length > 0 && mapInstance.current) {\n            // If map is already initialized, update the heatmap data\n            const heatData = earthquakeData.map((d) => [d.latitude, d.longitude, d.magnitude]);\n            L.heatLayer(heatData, { radius: 25, blur: 15 }).addTo(mapInstance.current);\n        }\n    }, [earthquakeData]);\n\n    return (\n        <div style={{ margin: 0, padding: 0, height: '100vh' }}> {/* Full viewport height */}\n            <h1\n                style={{\n                    textAlign: 'center',\n                    color: '#333',\n                    fontSize: '2rem',\n                    fontWeight: 'bold',\n                    position: 'absolute',\n                    top: '10px',\n                    width: '100%',\n                    zIndex: 1000,  // Keep the header on top of the map\n                    backgroundColor: 'rgba(255, 255, 255, 0.7)',  // Optional: make the background semi-transparent\n                }}\n            >\n                Earthquake Heatmap\n            </h1>\n            <div\n                ref={mapRef}\n                style={{\n                    width: '100%',\n                    height: '100vh',  // Full viewport height\n                    position: 'absolute',\n                    top: 0,  // Position the map to start at the top of the screen\n                    left: 0,  // Position the map to start at the left of the screen\n                }}\n            ></div> {/* Leaflet map container */}\n        </div>\n    );\n};\n\nexport default EarthquakeHeatmap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}